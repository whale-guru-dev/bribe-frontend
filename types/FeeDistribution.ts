/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FeeDistributionInterface extends utils.Interface {
  functions: {
    "claimFees(address[])": FunctionFragment;
    "distributeFeeTo(address)": FunctionFragment;
    "feeAsset()": FunctionFragment;
    "feeReceiverData(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pricePerShare()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rescueFunds(address)": FunctionFragment;
    "setFeeReceivers(address[],uint128[])": FunctionFragment;
    "totalAllocPoints()": FunctionFragment;
    "totalFeesReceived()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimFees", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "distributeFeeTo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "feeAsset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeReceiverData",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rescueFunds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeReceivers",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAllocPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFeesReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeFeeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiverData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceivers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAllocPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "ClaimFees(uint256,uint256)": EventFragment;
    "FeesTransferred(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RescueFunds(address,uint256)": EventFragment;
    "SetFeeReceiver(address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RescueFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeReceiver"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type ClaimFeesEvent = TypedEvent<
  [BigNumber, BigNumber],
  { receivedFees: BigNumber; totalFeesReceived: BigNumber }
>;

export type ClaimFeesEventFilter = TypedEventFilter<ClaimFeesEvent>;

export type FeesTransferredEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { receiver: string; feeShare: BigNumber; timestamp: BigNumber }
>;

export type FeesTransferredEventFilter = TypedEventFilter<FeesTransferredEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RescueFundsEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; amount: BigNumber }
>;

export type RescueFundsEventFilter = TypedEventFilter<RescueFundsEvent>;

export type SetFeeReceiverEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { receiver: string; currentAllocPoint: BigNumber; newAllocPoint: BigNumber }
>;

export type SetFeeReceiverEventFilter = TypedEventFilter<SetFeeReceiverEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface FeeDistribution extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeDistributionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimFees(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeFeeTo(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeAsset(overrides?: CallOverrides): Promise<[string]>;

    feeReceiverData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        pendingReward: BigNumber;
        allocPoint: BigNumber;
        lastPricePerShare: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pricePerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rescueFunds(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeReceivers(
      receivers: string[],
      allocPoints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalAllocPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFeesReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claimFees(
    pools: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeFeeTo(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeAsset(overrides?: CallOverrides): Promise<string>;

  feeReceiverData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      pendingReward: BigNumber;
      allocPoint: BigNumber;
      lastPricePerShare: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rescueFunds(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeReceivers(
    receivers: string[],
    allocPoints: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalAllocPoints(overrides?: CallOverrides): Promise<BigNumber>;

  totalFeesReceived(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimFees(pools: string[], overrides?: CallOverrides): Promise<void>;

    distributeFeeTo(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeAsset(overrides?: CallOverrides): Promise<string>;

    feeReceiverData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        pendingReward: BigNumber;
        allocPoint: BigNumber;
        lastPricePerShare: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rescueFunds(to: string, overrides?: CallOverrides): Promise<void>;

    setFeeReceivers(
      receivers: string[],
      allocPoints: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    totalAllocPoints(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeesReceived(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ClaimFees(uint256,uint256)"(
      receivedFees?: null,
      totalFeesReceived?: null
    ): ClaimFeesEventFilter;
    ClaimFees(
      receivedFees?: null,
      totalFeesReceived?: null
    ): ClaimFeesEventFilter;

    "FeesTransferred(address,uint256,uint256)"(
      receiver?: string | null,
      feeShare?: null,
      timestamp?: null
    ): FeesTransferredEventFilter;
    FeesTransferred(
      receiver?: string | null,
      feeShare?: null,
      timestamp?: null
    ): FeesTransferredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RescueFunds(address,uint256)"(
      sender?: null,
      amount?: null
    ): RescueFundsEventFilter;
    RescueFunds(sender?: null, amount?: null): RescueFundsEventFilter;

    "SetFeeReceiver(address,uint256,uint256)"(
      receiver?: string | null,
      currentAllocPoint?: null,
      newAllocPoint?: null
    ): SetFeeReceiverEventFilter;
    SetFeeReceiver(
      receiver?: string | null,
      currentAllocPoint?: null,
      newAllocPoint?: null
    ): SetFeeReceiverEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    claimFees(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeFeeTo(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeAsset(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiverData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rescueFunds(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeReceivers(
      receivers: string[],
      allocPoints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalAllocPoints(overrides?: CallOverrides): Promise<BigNumber>;

    totalFeesReceived(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimFees(
      pools: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeFeeTo(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiverData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rescueFunds(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeReceivers(
      receivers: string[],
      allocPoints: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalAllocPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalFeesReceived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
