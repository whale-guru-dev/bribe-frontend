/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type CurvePoolConfigStruct = {
  curvePool: string;
  xTokenIndex: BigNumberish;
  yTokenIndex: BigNumberish;
};

export type CurvePoolConfigStructOutput = [string, BigNumber, BigNumber] & {
  curvePool: string;
  xTokenIndex: BigNumber;
  yTokenIndex: BigNumber;
};

export type BidStruct = {
  token: string;
  amount: BigNumberish;
  minUSDCToReceive: BigNumberish;
  proposalId: BigNumberish;
  support: boolean;
  curvePoolConfig: CurvePoolConfigStruct;
};

export type BidStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  CurvePoolConfigStructOutput
] & {
  token: string;
  amount: BigNumber;
  minUSDCToReceive: BigNumber;
  proposalId: BigNumber;
  support: boolean;
  curvePoolConfig: CurvePoolConfigStructOutput;
};

export interface AaveMIMBidHelperV1Interface extends utils.Interface {
  functions: {
    "aaveBribePool()": FunctionFragment;
    "curveSwapAssetBid((address,uint256,uint256,uint256,bool,(address,int128,int128)))": FunctionFragment;
    "curveSwapAssetBidWithPermit((address,uint256,uint256,uint256,bool,(address,int128,int128)),address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "usdcToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aaveBribePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curveSwapAssetBid",
    values: [BidStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "curveSwapAssetBidWithPermit",
    values: [
      BidStruct,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "aaveBribePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveSwapAssetBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveSwapAssetBidWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;

  events: {
    "BidWithOtherAsset(address,address,uint256,bool,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BidWithOtherAsset"): EventFragment;
}

export type BidWithOtherAssetEvent = TypedEvent<
  [string, string, BigNumber, boolean, BigNumber, BigNumber],
  {
    token: string;
    bidder: string;
    proposalId: BigNumber;
    support: boolean;
    amountInBidAsset: BigNumber;
    usdcPlacedInBid: BigNumber;
  }
>;

export type BidWithOtherAssetEventFilter =
  TypedEventFilter<BidWithOtherAssetEvent>;

export interface AaveMIMBidHelperV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AaveMIMBidHelperV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aaveBribePool(overrides?: CallOverrides): Promise<[string]>;

    curveSwapAssetBid(
      bid: BidStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    curveSwapAssetBidWithPermit(
      bid: BidStruct,
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<[string]>;
  };

  aaveBribePool(overrides?: CallOverrides): Promise<string>;

  curveSwapAssetBid(
    bid: BidStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  curveSwapAssetBidWithPermit(
    bid: BidStruct,
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdcToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aaveBribePool(overrides?: CallOverrides): Promise<string>;

    curveSwapAssetBid(
      bid: BidStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curveSwapAssetBidWithPermit(
      bid: BidStruct,
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BidWithOtherAsset(address,address,uint256,bool,uint256,uint256)"(
      token?: string | null,
      bidder?: string | null,
      proposalId?: null,
      support?: null,
      amountInBidAsset?: null,
      usdcPlacedInBid?: null
    ): BidWithOtherAssetEventFilter;
    BidWithOtherAsset(
      token?: string | null,
      bidder?: string | null,
      proposalId?: null,
      support?: null,
      amountInBidAsset?: null,
      usdcPlacedInBid?: null
    ): BidWithOtherAssetEventFilter;
  };

  estimateGas: {
    aaveBribePool(overrides?: CallOverrides): Promise<BigNumber>;

    curveSwapAssetBid(
      bid: BidStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    curveSwapAssetBidWithPermit(
      bid: BidStruct,
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdcToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aaveBribePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    curveSwapAssetBid(
      bid: BidStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    curveSwapAssetBidWithPermit(
      bid: BidStruct,
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdcToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
