/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type BribeRewardStruct = {
  rewardAmountDistributedPerSecond: BigNumberish;
  startTimestamp: BigNumberish;
  endTimestamp: BigNumberish;
};

export type BribeRewardStructOutput = [BigNumber, BigNumber, BigNumber] & {
  rewardAmountDistributedPerSecond: BigNumber;
  startTimestamp: BigNumber;
  endTimestamp: BigNumber;
};

export interface AavePoolInterface extends utils.Interface {
  functions: {
    "aaveGovernance()": FunctionFragment;
    "aaveToken()": FunctionFragment;
    "assetIndex()": FunctionFragment;
    "bid(address,uint256,uint128,bool)": FunctionFragment;
    "bidAsset()": FunctionFragment;
    "bids(uint256)": FunctionFragment;
    "blockProposalId(uint256)": FunctionFragment;
    "blockedProposals(uint256)": FunctionFragment;
    "bribeRewardConfig()": FunctionFragment;
    "bribeToken()": FunctionFragment;
    "claimReward(address,address,bytes,bool)": FunctionFragment;
    "deposit(address,address,uint128,bool)": FunctionFragment;
    "distributeRewards(uint256)": FunctionFragment;
    "feeReceipient()": FunctionFragment;
    "feesReceived()": FunctionFragment;
    "getPendingRewardToBeDistributed()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "permitToken(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "refund(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardBalanceOf(address)": FunctionFragment;
    "setEndTimestamp(uint64)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setRewardPerSecond(uint128)": FunctionFragment;
    "setStartTimestamp(uint64,uint128)": FunctionFragment;
    "stkAaveToken()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unblockProposalId(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
    "vote(uint256)": FunctionFragment;
    "votingPower(uint256)": FunctionFragment;
    "withdraw(address,address,uint128,bool)": FunctionFragment;
    "withdrawFees()": FunctionFragment;
    "withdrawRemainingBribeReward()": FunctionFragment;
    "wrapperAaveToken()": FunctionFragment;
    "wrapperStkAaveToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "aaveGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "aaveToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "bidAsset", values?: undefined): string;
  encodeFunctionData(functionFragment: "bids", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "blockProposalId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "blockedProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bribeRewardConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bribeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [string, string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feesReceived",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewardToBeDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitToken",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerSecond",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStartTimestamp",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stkAaveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unblockProposalId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "votingPower",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRemainingBribeReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrapperAaveToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrapperStkAaveToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "aaveGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "aaveToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockedProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bribeRewardConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bribeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feesReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewardToBeDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStartTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stkAaveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unblockProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRemainingBribeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapperAaveToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrapperStkAaveToken",
    data: BytesLike
  ): Result;

  events: {
    "AssetReward(address,uint256,uint256)": EventFragment;
    "BlockProposalId(uint256,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "HighestBidIncreased(uint256,address,address,address,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Refund(uint256,address,uint256)": EventFragment;
    "RewardAccrue(address,uint256,uint256,uint256,uint256)": EventFragment;
    "RewardClaim(address,uint256,uint256,uint256,uint256)": EventFragment;
    "RewardDistributed(uint256,uint256)": EventFragment;
    "SetBribeRewardEndTimestamp(uint256,uint256)": EventFragment;
    "SetBribeRewardPerSecond(uint256,uint256)": EventFragment;
    "SetBribeRewardStartTimestamp(uint256,uint256)": EventFragment;
    "UnblockProposalId(uint256,uint256)": EventFragment;
    "UnclaimedRewards(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateDelayPeriod(uint256,uint256)": EventFragment;
    "UpdateFeeRecipient(address,address)": EventFragment;
    "Vote(uint256,address,bool,uint256)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
    "WithdrawFees(address,uint256,uint256)": EventFragment;
    "WithdrawRemainingReward(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockProposalId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighestBidIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardAccrue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBribeRewardEndTimestamp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBribeRewardPerSecond"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetBribeRewardStartTimestamp"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnblockProposalId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnclaimedRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateDelayPeriod"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRemainingReward"): EventFragment;
}

export type AssetRewardEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { asset: string; totalAmountAccrued: BigNumber; timestamp: BigNumber }
>;

export type AssetRewardEventFilter = TypedEventFilter<AssetRewardEvent>;

export type BlockProposalIdEvent = TypedEvent<
  [BigNumber, BigNumber],
  { proposalId: BigNumber; timestamp: BigNumber }
>;

export type BlockProposalIdEventFilter = TypedEventFilter<BlockProposalIdEvent>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { token: string; user: string; amount: BigNumber; timestamp: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type HighestBidIncreasedEvent = TypedEvent<
  [BigNumber, string, string, string, BigNumber, boolean],
  {
    proposalId: BigNumber;
    prevHighestBidder: string;
    highestBidder: string;
    sender: string;
    highestBid: BigNumber;
    support: boolean;
  }
>;

export type HighestBidIncreasedEventFilter =
  TypedEventFilter<HighestBidIncreasedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RefundEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  { proposalId: BigNumber; bidder: string; bidAmount: BigNumber }
>;

export type RefundEventFilter = TypedEventFilter<RefundEvent>;

export type RewardAccrueEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    user: string;
    pendingBidReward: BigNumber;
    pendingStkAaveReward: BigNumber;
    pendingBribeReward: BigNumber;
    timestamp: BigNumber;
  }
>;

export type RewardAccrueEventFilter = TypedEventFilter<RewardAccrueEvent>;

export type RewardClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    user: string;
    pendingBid: BigNumber;
    pendingReward: BigNumber;
    pendingBribeReward: BigNumber;
    timestamp: BigNumber;
  }
>;

export type RewardClaimEventFilter = TypedEventFilter<RewardClaimEvent>;

export type RewardDistributedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { proposalId: BigNumber; amount: BigNumber }
>;

export type RewardDistributedEventFilter =
  TypedEventFilter<RewardDistributedEvent>;

export type SetBribeRewardEndTimestampEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldTimestamp: BigNumber; endTimestamp: BigNumber }
>;

export type SetBribeRewardEndTimestampEventFilter =
  TypedEventFilter<SetBribeRewardEndTimestampEvent>;

export type SetBribeRewardPerSecondEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldRewardPerSecond: BigNumber; newRewardPerSecond: BigNumber }
>;

export type SetBribeRewardPerSecondEventFilter =
  TypedEventFilter<SetBribeRewardPerSecondEvent>;

export type SetBribeRewardStartTimestampEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldTimestamp: BigNumber; endTimestamp: BigNumber }
>;

export type SetBribeRewardStartTimestampEventFilter =
  TypedEventFilter<SetBribeRewardStartTimestampEvent>;

export type UnblockProposalIdEvent = TypedEvent<
  [BigNumber, BigNumber],
  { proposalId: BigNumber; timestamp: BigNumber }
>;

export type UnblockProposalIdEventFilter =
  TypedEventFilter<UnblockProposalIdEvent>;

export type UnclaimedRewardsEvent = TypedEvent<
  [string, BigNumber],
  { owner: string; amount: BigNumber }
>;

export type UnclaimedRewardsEventFilter =
  TypedEventFilter<UnclaimedRewardsEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpdateDelayPeriodEvent = TypedEvent<
  [BigNumber, BigNumber],
  { delayperiod: BigNumber; timestamp: BigNumber }
>;

export type UpdateDelayPeriodEventFilter =
  TypedEventFilter<UpdateDelayPeriodEvent>;

export type UpdateFeeRecipientEvent = TypedEvent<
  [string, string],
  { sender: string; receipient: string }
>;

export type UpdateFeeRecipientEventFilter =
  TypedEventFilter<UpdateFeeRecipientEvent>;

export type VoteEvent = TypedEvent<
  [BigNumber, string, boolean, BigNumber],
  {
    proposalId: BigNumber;
    user: string;
    support: boolean;
    timestamp: BigNumber;
  }
>;

export type VoteEventFilter = TypedEventFilter<VoteEvent>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { token: string; user: string; amount: BigNumber; timestamp: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type WithdrawFeesEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; feesReceived: BigNumber; timestamp: BigNumber }
>;

export type WithdrawFeesEventFilter = TypedEventFilter<WithdrawFeesEvent>;

export type WithdrawRemainingRewardEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type WithdrawRemainingRewardEventFilter =
  TypedEventFilter<WithdrawRemainingRewardEvent>;

export interface AavePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AavePoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    aaveGovernance(overrides?: CallOverrides): Promise<[string]>;

    aaveToken(overrides?: CallOverrides): Promise<[string]>;

    assetIndex(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lastStkAaveRewardBalance: BigNumber;
        rewardIndex: BigNumber;
        bribeRewardIndex: BigNumber;
        bribeLastRewardTimestamp: BigNumber;
        bidId: BigNumber;
        bidIndex: BigNumber;
        bribeRewardPerShare: BigNumber;
        stkAaveRewardPerShare: BigNumber;
      }
    >;

    bid(
      bidder: string,
      proposalId: BigNumberish,
      amount: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bidAsset(overrides?: CallOverrides): Promise<[string]>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean, string] & {
        totalVotes: BigNumber;
        proposalStartBlock: BigNumber;
        highestBid: BigNumber;
        endTime: BigNumber;
        support: boolean;
        voted: boolean;
        highestBidder: string;
      }
    >;

    blockProposalId(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blockedProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bribeRewardConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewardAmountDistributedPerSecond: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
      }
    >;

    bribeToken(overrides?: CallOverrides): Promise<[string]>;

    claimReward(
      to: string,
      executor: string,
      data: BytesLike,
      claim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      asset: string,
      recipient: string,
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeRewards(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeReceipient(overrides?: CallOverrides): Promise<[string]>;

    feesReceived(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPendingRewardToBeDistributed(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingReward: BigNumber }>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalPendingBidReward: BigNumber;
        totalPendingStkAaveReward: BigNumber;
        totalPendingBribeReward: BigNumber;
      }
    >;

    setEndTimestamp(
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeRecipient(
      newReceipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRewardPerSecond(
      rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStartTimestamp(
      startTimestamp: BigNumberish,
      rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stkAaveToken(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unblockProposalId(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votingPower(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { power: BigNumber }>;

    withdraw(
      asset: string,
      recipient: string,
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawRemainingBribeReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapperAaveToken(overrides?: CallOverrides): Promise<[string]>;

    wrapperStkAaveToken(overrides?: CallOverrides): Promise<[string]>;
  };

  aaveGovernance(overrides?: CallOverrides): Promise<string>;

  aaveToken(overrides?: CallOverrides): Promise<string>;

  assetIndex(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      lastStkAaveRewardBalance: BigNumber;
      rewardIndex: BigNumber;
      bribeRewardIndex: BigNumber;
      bribeLastRewardTimestamp: BigNumber;
      bidId: BigNumber;
      bidIndex: BigNumber;
      bribeRewardPerShare: BigNumber;
      stkAaveRewardPerShare: BigNumber;
    }
  >;

  bid(
    bidder: string,
    proposalId: BigNumberish,
    amount: BigNumberish,
    support: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bidAsset(overrides?: CallOverrides): Promise<string>;

  bids(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean, string] & {
      totalVotes: BigNumber;
      proposalStartBlock: BigNumber;
      highestBid: BigNumber;
      endTime: BigNumber;
      support: boolean;
      voted: boolean;
      highestBidder: string;
    }
  >;

  blockProposalId(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blockedProposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bribeRewardConfig(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      rewardAmountDistributedPerSecond: BigNumber;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
    }
  >;

  bribeToken(overrides?: CallOverrides): Promise<string>;

  claimReward(
    to: string,
    executor: string,
    data: BytesLike,
    claim: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    asset: string,
    recipient: string,
    amount: BigNumberish,
    claim: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeRewards(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeReceipient(overrides?: CallOverrides): Promise<string>;

  feesReceived(overrides?: CallOverrides): Promise<BigNumber>;

  getPendingRewardToBeDistributed(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  permitToken(
    token: string,
    from: string,
    to: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardBalanceOf(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalPendingBidReward: BigNumber;
      totalPendingStkAaveReward: BigNumber;
      totalPendingBribeReward: BigNumber;
    }
  >;

  setEndTimestamp(
    endTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeRecipient(
    newReceipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRewardPerSecond(
    rewardPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStartTimestamp(
    startTimestamp: BigNumberish,
    rewardPerSecond: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stkAaveToken(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unblockProposalId(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votingPower(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    asset: string,
    recipient: string,
    amount: BigNumberish,
    claim: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawRemainingBribeReward(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapperAaveToken(overrides?: CallOverrides): Promise<string>;

  wrapperStkAaveToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    aaveGovernance(overrides?: CallOverrides): Promise<string>;

    aaveToken(overrides?: CallOverrides): Promise<string>;

    assetIndex(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        lastStkAaveRewardBalance: BigNumber;
        rewardIndex: BigNumber;
        bribeRewardIndex: BigNumber;
        bribeLastRewardTimestamp: BigNumber;
        bidId: BigNumber;
        bidIndex: BigNumber;
        bribeRewardPerShare: BigNumber;
        stkAaveRewardPerShare: BigNumber;
      }
    >;

    bid(
      bidder: string,
      proposalId: BigNumberish,
      amount: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    bidAsset(overrides?: CallOverrides): Promise<string>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, boolean, string] & {
        totalVotes: BigNumber;
        proposalStartBlock: BigNumber;
        highestBid: BigNumber;
        endTime: BigNumber;
        support: boolean;
        voted: boolean;
        highestBidder: string;
      }
    >;

    blockProposalId(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    blockedProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bribeRewardConfig(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        rewardAmountDistributedPerSecond: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
      }
    >;

    bribeToken(overrides?: CallOverrides): Promise<string>;

    claimReward(
      to: string,
      executor: string,
      data: BytesLike,
      claim: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      asset: string,
      recipient: string,
      amount: BigNumberish,
      claim: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeRewards(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeReceipient(overrides?: CallOverrides): Promise<string>;

    feesReceived(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRewardToBeDistributed(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalPendingBidReward: BigNumber;
        totalPendingStkAaveReward: BigNumber;
        totalPendingBribeReward: BigNumber;
      }
    >;

    setEndTimestamp(
      endTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeRecipient(
      newReceipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardPerSecond(
      rewardPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setStartTimestamp(
      startTimestamp: BigNumberish,
      rewardPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stkAaveToken(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unblockProposalId(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vote(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    votingPower(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      asset: string,
      recipient: string,
      amount: BigNumberish,
      claim: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawRemainingBribeReward(overrides?: CallOverrides): Promise<void>;

    wrapperAaveToken(overrides?: CallOverrides): Promise<string>;

    wrapperStkAaveToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AssetReward(address,uint256,uint256)"(
      asset?: string | null,
      totalAmountAccrued?: null,
      timestamp?: null
    ): AssetRewardEventFilter;
    AssetReward(
      asset?: string | null,
      totalAmountAccrued?: null,
      timestamp?: null
    ): AssetRewardEventFilter;

    "BlockProposalId(uint256,uint256)"(
      proposalId?: BigNumberish | null,
      timestamp?: null
    ): BlockProposalIdEventFilter;
    BlockProposalId(
      proposalId?: BigNumberish | null,
      timestamp?: null
    ): BlockProposalIdEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      token?: string | null,
      user?: string | null,
      amount?: null,
      timestamp?: null
    ): DepositEventFilter;
    Deposit(
      token?: string | null,
      user?: string | null,
      amount?: null,
      timestamp?: null
    ): DepositEventFilter;

    "HighestBidIncreased(uint256,address,address,address,uint256,bool)"(
      proposalId?: BigNumberish | null,
      prevHighestBidder?: string | null,
      highestBidder?: string | null,
      sender?: null,
      highestBid?: null,
      support?: null
    ): HighestBidIncreasedEventFilter;
    HighestBidIncreased(
      proposalId?: BigNumberish | null,
      prevHighestBidder?: string | null,
      highestBidder?: string | null,
      sender?: null,
      highestBid?: null,
      support?: null
    ): HighestBidIncreasedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Refund(uint256,address,uint256)"(
      proposalId?: BigNumberish | null,
      bidder?: null,
      bidAmount?: null
    ): RefundEventFilter;
    Refund(
      proposalId?: BigNumberish | null,
      bidder?: null,
      bidAmount?: null
    ): RefundEventFilter;

    "RewardAccrue(address,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      pendingBidReward?: null,
      pendingStkAaveReward?: null,
      pendingBribeReward?: null,
      timestamp?: null
    ): RewardAccrueEventFilter;
    RewardAccrue(
      user?: string | null,
      pendingBidReward?: null,
      pendingStkAaveReward?: null,
      pendingBribeReward?: null,
      timestamp?: null
    ): RewardAccrueEventFilter;

    "RewardClaim(address,uint256,uint256,uint256,uint256)"(
      user?: string | null,
      pendingBid?: null,
      pendingReward?: null,
      pendingBribeReward?: null,
      timestamp?: null
    ): RewardClaimEventFilter;
    RewardClaim(
      user?: string | null,
      pendingBid?: null,
      pendingReward?: null,
      pendingBribeReward?: null,
      timestamp?: null
    ): RewardClaimEventFilter;

    "RewardDistributed(uint256,uint256)"(
      proposalId?: null,
      amount?: null
    ): RewardDistributedEventFilter;
    RewardDistributed(
      proposalId?: null,
      amount?: null
    ): RewardDistributedEventFilter;

    "SetBribeRewardEndTimestamp(uint256,uint256)"(
      oldTimestamp?: null,
      endTimestamp?: null
    ): SetBribeRewardEndTimestampEventFilter;
    SetBribeRewardEndTimestamp(
      oldTimestamp?: null,
      endTimestamp?: null
    ): SetBribeRewardEndTimestampEventFilter;

    "SetBribeRewardPerSecond(uint256,uint256)"(
      oldRewardPerSecond?: null,
      newRewardPerSecond?: null
    ): SetBribeRewardPerSecondEventFilter;
    SetBribeRewardPerSecond(
      oldRewardPerSecond?: null,
      newRewardPerSecond?: null
    ): SetBribeRewardPerSecondEventFilter;

    "SetBribeRewardStartTimestamp(uint256,uint256)"(
      oldTimestamp?: null,
      endTimestamp?: null
    ): SetBribeRewardStartTimestampEventFilter;
    SetBribeRewardStartTimestamp(
      oldTimestamp?: null,
      endTimestamp?: null
    ): SetBribeRewardStartTimestampEventFilter;

    "UnblockProposalId(uint256,uint256)"(
      proposalId?: BigNumberish | null,
      timestamp?: null
    ): UnblockProposalIdEventFilter;
    UnblockProposalId(
      proposalId?: BigNumberish | null,
      timestamp?: null
    ): UnblockProposalIdEventFilter;

    "UnclaimedRewards(address,uint256)"(
      owner?: null,
      amount?: null
    ): UnclaimedRewardsEventFilter;
    UnclaimedRewards(owner?: null, amount?: null): UnclaimedRewardsEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UpdateDelayPeriod(uint256,uint256)"(
      delayperiod?: null,
      timestamp?: null
    ): UpdateDelayPeriodEventFilter;
    UpdateDelayPeriod(
      delayperiod?: null,
      timestamp?: null
    ): UpdateDelayPeriodEventFilter;

    "UpdateFeeRecipient(address,address)"(
      sender?: null,
      receipient?: null
    ): UpdateFeeRecipientEventFilter;
    UpdateFeeRecipient(
      sender?: null,
      receipient?: null
    ): UpdateFeeRecipientEventFilter;

    "Vote(uint256,address,bool,uint256)"(
      proposalId?: BigNumberish | null,
      user?: null,
      support?: null,
      timestamp?: null
    ): VoteEventFilter;
    Vote(
      proposalId?: BigNumberish | null,
      user?: null,
      support?: null,
      timestamp?: null
    ): VoteEventFilter;

    "Withdraw(address,address,uint256,uint256)"(
      token?: string | null,
      user?: string | null,
      amount?: null,
      timestamp?: null
    ): WithdrawEventFilter;
    Withdraw(
      token?: string | null,
      user?: string | null,
      amount?: null,
      timestamp?: null
    ): WithdrawEventFilter;

    "WithdrawFees(address,uint256,uint256)"(
      sender?: string | null,
      feesReceived?: null,
      timestamp?: null
    ): WithdrawFeesEventFilter;
    WithdrawFees(
      sender?: string | null,
      feesReceived?: null,
      timestamp?: null
    ): WithdrawFeesEventFilter;

    "WithdrawRemainingReward(uint256)"(
      amount?: null
    ): WithdrawRemainingRewardEventFilter;
    WithdrawRemainingReward(amount?: null): WithdrawRemainingRewardEventFilter;
  };

  estimateGas: {
    aaveGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    aaveToken(overrides?: CallOverrides): Promise<BigNumber>;

    assetIndex(overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      bidder: string,
      proposalId: BigNumberish,
      amount: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bidAsset(overrides?: CallOverrides): Promise<BigNumber>;

    bids(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    blockProposalId(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blockedProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bribeRewardConfig(overrides?: CallOverrides): Promise<BigNumber>;

    bribeToken(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      to: string,
      executor: string,
      data: BytesLike,
      claim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      asset: string,
      recipient: string,
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeRewards(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeReceipient(overrides?: CallOverrides): Promise<BigNumber>;

    feesReceived(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingRewardToBeDistributed(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setEndTimestamp(
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeRecipient(
      newReceipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRewardPerSecond(
      rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStartTimestamp(
      startTimestamp: BigNumberish,
      rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stkAaveToken(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unblockProposalId(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votingPower(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      asset: string,
      recipient: string,
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawRemainingBribeReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapperAaveToken(overrides?: CallOverrides): Promise<BigNumber>;

    wrapperStkAaveToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    aaveGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    aaveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bid(
      bidder: string,
      proposalId: BigNumberish,
      amount: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bidAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blockProposalId(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blockedProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bribeRewardConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bribeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      to: string,
      executor: string,
      data: BytesLike,
      claim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      asset: string,
      recipient: string,
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeReceipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feesReceived(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPendingRewardToBeDistributed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitToken(
      token: string,
      from: string,
      to: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setEndTimestamp(
      endTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newReceipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRewardPerSecond(
      rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStartTimestamp(
      startTimestamp: BigNumberish,
      rewardPerSecond: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stkAaveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unblockProposalId(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votingPower(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      asset: string,
      recipient: string,
      amount: BigNumberish,
      claim: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawRemainingBribeReward(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapperAaveToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrapperStkAaveToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
